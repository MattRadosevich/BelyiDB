s := BelyiDBInitialize();

/*
Base Field Data
*/

base_field_data := [* *];
K1<nu1> := NumberField(Polynomial([RationalField() | 1, 0, -1, 0, 1]));
place1 := InfinitePlaces(K1)[1];
conj1 := false;
CC<I> := ComplexField(20);
z1 := 0.00000000000000000000p20;
base_field_data_1 := [* K1, place1, conj1, z1 *];
Append(~base_field_data, base_field_data_1);
K2<nu2> := NumberField(Polynomial([RationalField() | 1, 0, -1, 0, 1]));
place2 := InfinitePlaces(K2)[1];
conj2 := false;
CC<I> := ComplexField(20);
z2 := 0.00000000000000000000p20;
base_field_data_2 := [* K2, place2, conj2, z2 *];
Append(~base_field_data, base_field_data_2);
s`BelyiDBBaseFieldData := base_field_data;

/*
Belyi Maps
*/

curves := [* *];
maps := [* *];
K1<nu1> := K1;
X1 := Curve(ProjectiveSpace(PolynomialRing(K1, 2)));
KX1<x> := FunctionField(X1);
phi1 := KX1!((-4096*x^9 + (98304*nu1^3 - 147456*nu1^2 + 98304*nu1)*x^8 + (6389760*nu1^3 - 5419008*nu1^2 - 3194880*nu1 + 5419008)*x^7 + (63455232*nu1^3 - 126910464*nu1 + 110321664)*x^6 + (-821133312*nu1^3 + 1424240640*nu1^2 - 821133312*nu1)*x^5 + (-14160101376*nu1^3 + 12262440960*nu1^2 + 7080050688*nu1 - 12262440960)*x^4 + (-40667824128*nu1^3 + 81335648256*nu1 - 70425071616)*x^3 + (150139060224*nu1^3 - 260022067200*nu1^2 + 150139060224*nu1)*x^2 + (646629556224*nu1^3 - 559976398848*nu1^2 - 323314778112*nu1 + 559976398848)*x + (309420687360*nu1^3 - 618841374720*nu1 + 535925915648))/(x^12 + (-24*nu1^3 + 36*nu1^2 - 24*nu1)*x^11 + (-1488*nu1^3 + 1242*nu1^2 + 744*nu1 - 1242)*x^10 + (-12072*nu1^3 + 24144*nu1 - 22884)*x^9 + (117528*nu1^3 - 194679*nu1^2 + 117528*nu1)*x^8 + (682464*nu1^3 - 539784*nu1^2 - 341232*nu1 + 539784)*x^7 + (-3817968*nu1^3 + 7635936*nu1 - 5340660)*x^6 + (31570608*nu1^3 - 59983704*nu1^2 + 31570608*nu1)*x^5 + (84034464*nu1^3 - 83328129*nu1^2 - 42017232*nu1 + 83328129)*x^4 + (-491233656*nu1^3 + 982467312*nu1 - 1121447636)*x^3 + (2390197896*nu1^3 - 2961168570*nu1^2 + 2390197896*nu1)*x^2 + (-6542185968*nu1^3 + 3650319756*nu1^2 + 3271092984*nu1 - 3650319756)*x - 15624540360*nu1^3 + 31249080720*nu1 - 28278002583));
Append(~curves, X1);
Append(~maps, phi1);
K2<nu2> := K2;
X2 := Curve(ProjectiveSpace(PolynomialRing(K2, 2)));
KX2<x> := FunctionField(X2);
phi2 := KX2!((-4096*x^9 + (196608*nu2^3 + 147456*nu2^2 - 98304*nu2 - 147456)*x^8 + (3194880*nu2^3 + 5419008*nu2^2 + 3194880*nu2)*x^7 + (-63455232*nu2^3 + 126910464*nu2 + 110321664)*x^6 + (-1642266624*nu2^3 - 1424240640*nu2^2 + 821133312*nu2 + 1424240640)*x^5 + (-7080050688*nu2^3 - 12262440960*nu2^2 - 7080050688*nu2)*x^4 + (40667824128*nu2^3 - 81335648256*nu2 - 70425071616)*x^3 + (300278120448*nu2^3 + 260022067200*nu2^2 - 150139060224*nu2 - 260022067200)*x^2 + (323314778112*nu2^3 + 559976398848*nu2^2 + 323314778112*nu2)*x - 309420687360*nu2^3 + 618841374720*nu2 + 535925915648)/(x^12 + (-48*nu2^3 - 36*nu2^2 + 24*nu2 + 36)*x^11 + (-744*nu2^3 - 1242*nu2^2 - 744*nu2)*x^10 + (12072*nu2^3 - 24144*nu2 - 22884)*x^9 + (235056*nu2^3 + 194679*nu2^2 - 117528*nu2 - 194679)*x^8 + (341232*nu2^3 + 539784*nu2^2 + 341232*nu2)*x^7 + (3817968*nu2^3 - 7635936*nu2 - 5340660)*x^6 + (63141216*nu2^3 + 59983704*nu2^2 - 31570608*nu2 - 59983704)*x^5 + (42017232*nu2^3 + 83328129*nu2^2 + 42017232*nu2)*x^4 + (491233656*nu2^3 - 982467312*nu2 - 1121447636)*x^3 + (4780395792*nu2^3 + 2961168570*nu2^2 - 2390197896*nu2 - 2961168570)*x^2 + (-3271092984*nu2^3 - 3650319756*nu2^2 - 3271092984*nu2)*x + (15624540360*nu2^3 - 31249080720*nu2 - 28278002583)));
Append(~curves, X2);
Append(~maps, phi2);
s`BelyiDBBelyiCurves := curves;
s`BelyiDBBelyiMaps := maps;

/*
auto printing
*/

s`BelyiDBName := "12T61-[6,2,3]-6,3,3-2,2,2,2,2,1,1-3,3,3,3-g0";
s`BelyiDBFilename := "12T61-[6,2,3]-6,3,3-2,2,2,2,2,1,1-3,3,3,3-g0.m";
s`BelyiDBDegree := 12;
s`BelyiDBOrders := \[ 6, 2, 3 ];
s`BelyiDBType := "Euclidean";
s`BelyiDBGenus := 0;
s`BelyiDBSize := 2;
s`BelyiDBPointedSize := 2;
s`BelyiDBPermutationTriple := [ PermutationGroup<12 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ]:
 Order := 479001600 > |
[ 11, 6, 7, 2, 3, 4, 5, 1, 12, 8, 9, 10 ],
[ 1, 9, 8, 10, 11, 7, 6, 3, 2, 4, 5, 12 ],
[ 3, 10, 11, 7, 6, 9, 8, 4, 5, 12, 1, 2 ]
];
s`BelyiDBAutomorphismGroup := PermutationGroup<12 |  
\[ 12, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 1 ]:
 Order := 2 >;
s`BelyiDBPointedAutomorphismGroup := PermutationGroup<12 |  
\[ 12, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 1 ]:
 Order := 2 >;
s`BelyiDBMonodromyGroup := PermutationGroup<12 |  
\[ 11, 6, 7, 2, 3, 4, 5, 1, 12, 8, 9, 10 ],
\[ 1, 9, 8, 10, 11, 7, 6, 3, 2, 4, 5, 12 ],
\[ 3, 10, 11, 7, 6, 9, 8, 4, 5, 12, 1, 2 ]:
 Order := 96 >;
s`BelyiDBPassport := [ PowerSequence(PermutationGroup<12 |  
\[ 11, 6, 7, 2, 3, 4, 5, 1, 12, 8, 9, 10 ],
\[ 1, 9, 8, 10, 11, 7, 6, 3, 2, 4, 5, 12 ],
\[ 3, 10, 11, 7, 6, 9, 8, 4, 5, 12, 1, 2 ]:
 Order := 96 >) |
[ PermutationGroup<12 |  
\[ 11, 6, 7, 2, 3, 4, 5, 1, 12, 8, 9, 10 ],
\[ 1, 9, 8, 10, 11, 7, 6, 3, 2, 4, 5, 12 ],
\[ 3, 10, 11, 7, 6, 9, 8, 4, 5, 12, 1, 2 ]:
 Order := 96 > |
[ 8, 4, 5, 6, 7, 2, 3, 10, 11, 12, 1, 9 ],
[ 6, 2, 3, 11, 10, 1, 12, 9, 8, 5, 4, 7 ],
[ 4, 1, 12, 2, 3, 11, 10, 6, 7, 9, 8, 5 ]
],
[ PermutationGroup<12 |  
\[ 11, 6, 7, 2, 3, 4, 5, 1, 12, 8, 9, 10 ],
\[ 1, 9, 8, 10, 11, 7, 6, 3, 2, 4, 5, 12 ],
\[ 3, 10, 11, 7, 6, 9, 8, 4, 5, 12, 1, 2 ]:
 Order := 96 > |
[ 8, 4, 5, 6, 7, 2, 3, 10, 11, 12, 1, 9 ],
[ 1, 9, 8, 10, 11, 7, 6, 3, 2, 4, 5, 12 ],
[ 5, 7, 6, 9, 8, 10, 11, 1, 12, 3, 2, 4 ]
]
];
s`BelyiDBPointedPassport := [ PowerSequence(PermutationGroup<12 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ]:
 Order := 479001600 >) |
[ PermutationGroup<12 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ]:
 Order := 479001600 > |
[ 11, 6, 7, 2, 3, 4, 5, 1, 12, 8, 9, 10 ],
[ 1, 9, 8, 10, 11, 7, 6, 3, 2, 4, 5, 12 ],
[ 3, 10, 11, 7, 6, 9, 8, 4, 5, 12, 1, 2 ]
],
[ PermutationGroup<12 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ]:
 Order := 479001600 > |
[ 5, 1, 12, 2, 3, 11, 10, 7, 6, 8, 9, 4 ],
[ 12, 9, 8, 11, 10, 6, 7, 3, 2, 5, 4, 1 ],
[ 9, 11, 10, 1, 12, 2, 3, 5, 4, 7, 6, 8 ]
]
];

/*
Numerical Data
*/


/*
Powser Bases
*/


/*
Return for eval
*/

return s;
