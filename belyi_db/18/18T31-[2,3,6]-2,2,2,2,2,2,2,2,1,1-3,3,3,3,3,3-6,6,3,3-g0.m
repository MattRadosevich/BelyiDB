s := BelyiDBInitialize();

/*
Base Field Data
*/

base_field_data := [* *];
K1<nu1> := NumberField(Polynomial([RationalField() | 1, -1, 1]));
place1 := InfinitePlaces(K1)[1];
conj1 := false;
CC<I> := ComplexField(20);
z1 := 0.00000000000000000000p20;
base_field_data_1 := [* K1, place1, conj1, z1 *];
Append(~base_field_data, base_field_data_1);
s`BelyiDBBaseFieldData := base_field_data;

/*
Belyi Maps
*/

curves := [* *];
maps := [* *];
K1<nu1> := K1;
X1 := Curve(ProjectiveSpace(PolynomialRing(K1, 2)));
KX1<x> := FunctionField(X1);
phi1 := KX1!((1/46656*x^18 - 1/864*nu1*x^17 + 1/576*(13*nu1 - 13)*x^16 + 25/36*x^15 - 461/16*nu1*x^14 + 1/8*(4893*nu1 - 4893)*x^13 + 141333/16*x^12 - 691551/4*nu1*x^11 + 1/32*(110228607*nu1 - 110228607)*x^10 + 561174345/16*x^9 + 3847659813/32*nu1*x^8 + 1/4*(-35349502329*nu1 + 35349502329)*x^7 - 2143247046399/16*x^6 + 9483636940659/8*nu1*x^5 + 1/16*(-111061490101263*nu1 + 111061490101263)*x^4 - 109683841501863/4*x^3 + 4526800705033119/64*nu1*x^2 + 1/32*(-3455103696354765*nu1 + 3455103696354765)*x - 4742629534581939/64)/(x^15 - 54*nu1*x^14 + (1134*nu1 - 1134)*x^13 + 10368*x^12 - 10935*nu1*x^11 + (-520506*nu1 + 520506)*x^10 - 2904336*x^9 - 8030664*nu1*x^8 + (94891743*nu1 - 94891743)*x^7 - 28540350*x^6 + 1569876714*nu1*x^5 + (-153055008*nu1 + 153055008)*x^4 + 15080701257*x^3 + 5423886846*nu1*x^2 + (-69735688020*nu1 + 69735688020)*x + 83682825624));
Append(~curves, X1);
Append(~maps, phi1);
s`BelyiDBBelyiCurves := curves;
s`BelyiDBBelyiMaps := maps;

/*
auto printing
*/

s`BelyiDBName := "18T31-[2,3,6]-2,2,2,2,2,2,2,2,1,1-3,3,3,3,3,3-6,6,3,3-g0";
s`BelyiDBFilename := "18T31-[2,3,6]-2,2,2,2,2,2,2,2,1,1-3,3,3,3,3,3-6,6,3,3-g0.m";
s`BelyiDBDegree := 18;
s`BelyiDBOrders := \[ 2, 3, 6 ];
s`BelyiDBType := "Euclidean";
s`BelyiDBGenus := 0;
s`BelyiDBSize := 1;
s`BelyiDBPointedSize := 1;
s`BelyiDBPermutationTriple := [ PermutationGroup<18 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 ]:
 Order := 6402373705728000 > |
[ 1, 4, 5, 2, 3, 10, 8, 7, 11, 6, 9, 15, 16, 17, 12, 13, 14, 18 ],
[ 3, 1, 2, 7, 9, 4, 6, 5, 8, 13, 15, 10, 12, 11, 14, 18, 16, 17 ],
[ 2, 6, 8, 3, 1, 12, 9, 4, 14, 7, 5, 11, 17, 18, 13, 10, 15, 16 ]
];
s`BelyiDBAutomorphismGroup := PermutationGroup<18 |  
\[ 18, 16, 17, 13, 14, 10, 12, 15, 11, 6, 9, 7, 4, 5, 8, 2, 3, 1 ]:
 Order := 2 >;
s`BelyiDBPointedAutomorphismGroup := PermutationGroup<18 |   >;
s`BelyiDBMonodromyGroup := PermutationGroup<18 |  
\[ 1, 4, 5, 2, 3, 10, 8, 7, 11, 6, 9, 15, 16, 17, 12, 13, 14, 18 ],
\[ 3, 1, 2, 7, 9, 4, 6, 5, 8, 13, 15, 10, 12, 11, 14, 18, 16, 17 ],
\[ 2, 6, 8, 3, 1, 12, 9, 4, 14, 7, 5, 11, 17, 18, 13, 10, 15, 16 ]:
 Order := 72 >;
s`BelyiDBPassport := [ PowerSequence(PermutationGroup<18 |  
\[ 1, 4, 5, 2, 3, 10, 8, 7, 11, 6, 9, 15, 16, 17, 12, 13, 14, 18 ],
\[ 3, 1, 2, 7, 9, 4, 6, 5, 8, 13, 15, 10, 12, 11, 14, 18, 16, 17 ],
\[ 2, 6, 8, 3, 1, 12, 9, 4, 14, 7, 5, 11, 17, 18, 13, 10, 15, 16 ]:
 Order := 72 >) |
[ PermutationGroup<18 |  
\[ 1, 4, 5, 2, 3, 10, 8, 7, 11, 6, 9, 15, 16, 17, 12, 13, 14, 18 ],
\[ 3, 1, 2, 7, 9, 4, 6, 5, 8, 13, 15, 10, 12, 11, 14, 18, 16, 17 ],
\[ 2, 6, 8, 3, 1, 12, 9, 4, 14, 7, 5, 11, 17, 18, 13, 10, 15, 16 ]:
 Order := 72 > |
[ 8, 2, 6, 9, 14, 3, 12, 1, 4, 17, 13, 7, 11, 5, 18, 16, 10, 15 ],
[ 2, 3, 1, 6, 8, 7, 4, 9, 5, 12, 14, 13, 10, 15, 11, 17, 18, 16 ],
[ 5, 1, 4, 8, 11, 2, 10, 3, 7, 16, 12, 6, 15, 9, 17, 18, 13, 14 ]
]
];
s`BelyiDBPointedPassport := [ PowerSequence(PermutationGroup<18 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 ]:
 Order := 6402373705728000 >) |
[ PermutationGroup<18 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 ]:
 Order := 6402373705728000 > |
[ 1, 4, 5, 2, 3, 10, 8, 7, 11, 6, 9, 15, 16, 17, 12, 13, 14, 18 ],
[ 3, 1, 2, 7, 9, 4, 6, 5, 8, 13, 15, 10, 12, 11, 14, 18, 16, 17 ],
[ 2, 6, 8, 3, 1, 12, 9, 4, 14, 7, 5, 11, 17, 18, 13, 10, 15, 16 ]
]
];

/*
Numerical Data
*/


/*
Powser Bases
*/


/*
Return for eval
*/

return s;
