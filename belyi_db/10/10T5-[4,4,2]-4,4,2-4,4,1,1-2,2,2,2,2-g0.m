s := BelyiDBInitialize();

/*
Base Field Data
*/

base_field_data := [* *];
K1<nu1> := NumberField(Polynomial(\[1, 0, 1]));
place1 := InfinitePlaces(K1)[1];
conj1 := false;
CC<I> := ComplexField(20);
z1 := 0.00000000000000000000p20;
base_field_data_1 := [* K1, place1, conj1, z1 *];
Append(~base_field_data, base_field_data_1);
K2<nu2> := NumberField(Polynomial(\[1, 0, 1]));
place2 := InfinitePlaces(K2)[1];
conj2 := false;
CC<I> := ComplexField(20);
z2 := 0.00000000000000000000p20;
base_field_data_2 := [* K2, place2, conj2, z2 *];
Append(~base_field_data, base_field_data_2);
s`BelyiDBBaseFieldData := base_field_data;

/*
Belyi Maps
*/

curves := [* *];
maps := [* *];
K1<nu1> := K1;
X1 := Curve(ProjectiveSpace(PolynomialRing(K1, 2)));
KX1<x> := FunctionField(X1);
phi1 := KX1!((x^10 + (320*nu1 + 3240)*x^9 + (915200*nu1 + 3816400)*x^8 + (943411200*nu1 + 1836838400)*x^7 + (399490170880*nu1 + 200057500160)*x^6 + (47434724114432*nu1 - 60360170213376)*x^5 + (-4444010241720320*nu1 + 460774317301760)*x^4 + (206338712744755200*nu1 - 8020948998553600)*x^3 + (-3662788528753868800*nu1 + 1409425483531878400)*x^2 + (22729729427237765120*nu1 - 23310070788493148160)*x - 29900669864185430016*nu1 + 95425101213847257088)/(x^10 + (320*nu1 - 6760)*x^9 + (-1900800*nu1 + 11304400)*x^8 + (2739916800*nu1 + 368857600)*x^7 + (67863429120*nu1 + 116297699840)*x^6 + (50596277485568*nu1 - 17549538586624)*x^5 + (-1197440868679680*nu1 - 615788410101760)*x^4 + (149057897417932800*nu1 - 232838448752230400)*x^3 + (-11456224026741964800*nu1 - 396775817181593600)*x^2 + (-53783049814807674880*nu1 + 41077774436036771840)*x - 29900669864185430016*nu1 + 95425101213847257088));
Append(~curves, X1);
Append(~maps, phi1);
K2<nu2> := K2;
X2 := Curve(ProjectiveSpace(PolynomialRing(K2, 2)));
KX2<x> := FunctionField(X2);
phi2 := KX2!((x^10 + (-320*nu2 + 3240)*x^9 + (-915200*nu2 + 3816400)*x^8 + (-943411200*nu2 + 1836838400)*x^7 + (-399490170880*nu2 + 200057500160)*x^6 + (-47434724114432*nu2 - 60360170213376)*x^5 + (4444010241720320*nu2 + 460774317301760)*x^4 + (-206338712744755200*nu2 - 8020948998553600)*x^3 + (3662788528753868800*nu2 + 1409425483531878400)*x^2 + (-22729729427237765120*nu2 - 23310070788493148160)*x + (29900669864185430016*nu2 + 95425101213847257088))/(x^10 + (-320*nu2 - 6760)*x^9 + (1900800*nu2 + 11304400)*x^8 + (-2739916800*nu2 + 368857600)*x^7 + (-67863429120*nu2 + 116297699840)*x^6 + (-50596277485568*nu2 - 17549538586624)*x^5 + (1197440868679680*nu2 - 615788410101760)*x^4 + (-149057897417932800*nu2 - 232838448752230400)*x^3 + (11456224026741964800*nu2 - 396775817181593600)*x^2 + (53783049814807674880*nu2 + 41077774436036771840)*x + (29900669864185430016*nu2 + 95425101213847257088)));
Append(~curves, X2);
Append(~maps, phi2);
s`BelyiDBBelyiCurves := curves;
s`BelyiDBBelyiMaps := maps;

/*
auto printing
*/

s`BelyiDBName := "10T5-[4,4,2]-4,4,2-4,4,1,1-2,2,2,2,2-g0";
s`BelyiDBFilename := "10T5-[4,4,2]-4,4,2-4,4,1,1-2,2,2,2,2-g0.m";
s`BelyiDBDegree := 10;
s`BelyiDBOrders := \[ 4, 4, 2 ];
s`BelyiDBType := "Euclidean";
s`BelyiDBGenus := 0;
s`BelyiDBSize := 2;
s`BelyiDBPointedSize := 2;
s`BelyiDBPermutationTriple := [ PermutationGroup<10 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10 ]:
 Order := 3628800 > |
[ 7, 9, 10, 3, 2, 4, 1, 5, 8, 6 ],
[ 10, 3, 6, 4, 9, 7, 2, 8, 1, 5 ],
[ 6, 10, 4, 3, 8, 1, 9, 5, 7, 2 ]
];
s`BelyiDBAutomorphismGroup := PermutationGroup<10 |  
\[ 7, 10, 5, 8, 3, 9, 1, 4, 6, 2 ]:
 Order := 2 >;
s`BelyiDBPointedAutomorphismGroup := PermutationGroup<10 |  
\[ 7, 10, 5, 8, 3, 9, 1, 4, 6, 2 ]:
 Order := 2 >;
s`BelyiDBMonodromyGroup := PermutationGroup<10 |  
\[ 7, 9, 10, 3, 2, 4, 1, 5, 8, 6 ],
\[ 10, 3, 6, 4, 9, 7, 2, 8, 1, 5 ],
\[ 6, 10, 4, 3, 8, 1, 9, 5, 7, 2 ]:
 Order := 40 >;
s`BelyiDBPassport := [ PowerSequence(PermutationGroup<10 |  
\[ 7, 9, 10, 3, 2, 4, 1, 5, 8, 6 ],
\[ 10, 3, 6, 4, 9, 7, 2, 8, 1, 5 ],
\[ 6, 10, 4, 3, 8, 1, 9, 5, 7, 2 ]:
 Order := 40 >) |
[ PermutationGroup<10 |  
\[ 7, 9, 10, 3, 2, 4, 1, 5, 8, 6 ],
\[ 10, 3, 6, 4, 9, 7, 2, 8, 1, 5 ],
\[ 6, 10, 4, 3, 8, 1, 9, 5, 7, 2 ]:
 Order := 40 > |
[ 7, 9, 10, 3, 2, 4, 1, 5, 8, 6 ],
[ 10, 3, 6, 4, 9, 7, 2, 8, 1, 5 ],
[ 6, 10, 4, 3, 8, 1, 9, 5, 7, 2 ]
],
[ PermutationGroup<10 |  
\[ 7, 9, 10, 3, 2, 4, 1, 5, 8, 6 ],
\[ 10, 3, 6, 4, 9, 7, 2, 8, 1, 5 ],
\[ 6, 10, 4, 3, 8, 1, 9, 5, 7, 2 ]:
 Order := 40 > |
[ 7, 5, 4, 6, 8, 10, 1, 9, 2, 3 ],
[ 9, 7, 2, 4, 10, 3, 6, 8, 5, 1 ],
[ 2, 1, 5, 6, 3, 4, 10, 9, 8, 7 ]
]
];
s`BelyiDBPointedPassport := [ PowerSequence(PermutationGroup<10 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10 ]:
 Order := 3628800 >) |
[ PermutationGroup<10 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10 ]:
 Order := 3628800 > |
[ 7, 9, 10, 3, 2, 4, 1, 5, 8, 6 ],
[ 10, 3, 6, 4, 9, 7, 2, 8, 1, 5 ],
[ 6, 10, 4, 3, 8, 1, 9, 5, 7, 2 ]
],
[ PermutationGroup<10 |  
\[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 1 ],
\[ 2, 1, 3, 4, 5, 6, 7, 8, 9, 10 ]:
 Order := 3628800 > |
[ 7, 5, 4, 6, 8, 10, 1, 9, 2, 3 ],
[ 10, 8, 7, 5, 1, 6, 2, 3, 9, 4 ],
[ 3, 9, 1, 8, 7, 10, 5, 4, 2, 6 ]
]
];

/*
Numerical Data
*/


/*
Powser Bases
*/


/*
Return for eval
*/

return s;
